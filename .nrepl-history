(doc intern)
(require 'tailrecursion.boot-weasel :refer :all :reload)
(require 'tailrecursion.boot-weasel :refer :all)
(require '[tailrecursion.boot-weasel :refer :all] :reload)
(require '[tailrecursion.boot-weasel :refer :all :reload])
(require '[tailrecursion.boot-weasel :refer :all])
(pst)
(require '[tailrecursion.boot-weasel :refer :all])
(macroexpand '(r foo/bar))
(defmacro m [x] `(do (require '~(symbol (namespace '~sym)))))
(m foo/bar)
(defmacro m [x] `(do (require '~(symbol "foo"))))
(macroexpand '(m foo/bar))
(namespace 'foo/bar)
(defmacro m [x] `(do (require '~(symbol (namespace ~x)))))
(macroexpand '(m foo/bar))
(defmacro m [x] `(do (require '~(symbol (namespace x)))))
(macroexpand '(m foo/bar))
(m foo/bar)
(require '[tailrecursion.boot-weasel :refer :all])
(macroexpand '(r foo/bar))
(require '[tailrecursion.boot-weasel :refer :all])
(boot (weasel))
(pst)
(require '[tailrecursion.boot-weasel :refer :all])
(boot (weasel))
(pst)
(require '[tailrecursion.boot-weasel :refer :all])
(boot (weasel))
(require 'tailrecursion.boot-weasel :reload)
(boot (weasel))
(doc intern)
(meta (with-meta :foo {:a 1}))
(require 'tailrecursion.boot-weasel :reload)
(boot (weasel :port 1000))
